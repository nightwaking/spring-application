ArrayList的add方法，向指定的位置添加元素。
public void add (int index, E element) {
}

基本思路
(1)检查添加的元素下标是否越界
(2)判断数组是否需要扩容
(3)将需要插入位置之后的元素向后复制一位
(4)为数组下标为index的元素赋值
(5)将数组长度 + 1

ArrayList的get方法，获取指定下标的元素
(1)检查数组是否越界
(2)直接从底层函数中拿到想要的值
return element(index);

public E get(int index) {
    rangeCheck(index);
    return elementData(index);
}

E elementData(int index) {
    return (E) elementData[index];
}

ArrayList的set方法，改变指定下标的元素
(1)检查数组是否越界
(2)获取下标位置原来的元素
(3)为指定下标的元素赋值
(4)返回原来的元素

public E set(int index, E element) {
    rangeCheck(index);
    E oldValue = elementData(index);
    elementData[index] = element;
    return oldValue;
}

LinkedList 特性
LinkedList是基于双向列表实现的

Vector是线程安全的。底层是数组实现的,数组长度不够用时扩展一倍。


线性表
线性表中的元素是按照线性排序的，线性表中的元素是按线性排列的。线性指逻辑上的线性。
线性表分为两大类，分别为顺序表和链表。

1.顺序表
顺序表中的数据元素是连续的，内存划分的区域也是连续的。

2.链表
链表在物理存储上通常是非连续的，非顺序的方式存储的，数据元素的逻辑顺序是通过链表中的引用来实现的。
（1）单向链表
内存中的对象是随机分布的，对象不仅存储了数据而且还持有一个next的引用，指向下一个对象，确定一组对象的逻辑顺序。
（2）循环链表
和单向列表相同，最后一个对象又指向了第一的对象。
（3）双向列表
不但持有next引用指向下一个对象，还持有一个prev引用，指向上一个对象。

3.栈和队列
栈和队列是比较特殊的线性表。
（1）栈
    栈是一种操作受限制的线性表。限制是仅允许在线性表的尾部进行添加和删除操作，称作栈顶，另一端称为栈底。向
    一个栈添加元素称为压栈，删除元素称为出栈。
（2）队列
    队列也是一种操作受限制的线性表。只能从头部删除元素，从队尾添加元素，进行删除操作的一端称为队头。

LinkedList
LinkedList是基于双向链表实现的。
三个成员变量。
transient int size = 0;

transient Node<E> first;

transient Node<E> last;
              __________
            |  LinkedList|
            |  对象      |
personList-> ——————
            | first:null |
            | last:null  |
            | size:0     |
            |  ________  |

Node定义:
//静态私有变脸，只能够在LinkedList内部访问
private static class Node <E> {
    E item;
    // 持有两个Node引用
    Node<E> next;
    Node<E> prev;

    Node(Node<E> prev, E element, Node<E> next){
        this.item = element;
        this.next = next;
        this.prev = prev;
    }
}

LinkedList的add方法:
public boolean add (E e){
    linkLast(e);
    return true;
}

void linkLast(E e){
    final Node<E> l = last;
}


Hibernate知识

持久化:一般是指利用SQL在关系型。
关系型数据库:数据独立。数据比任何应用程序都存在的更长久。
DDL、DML
java代码通过java数据库连通性API把SQL语句发送到数据库。

面向对象应用程序中的持久化
面向对象程序中，持久化允许一个对象在创建之后依然存在。对象的这种状态被持久化到磁盘，
且相同状态的对象可以在未来的某个时候被重新创建。
大多数对象并不是持久化的;瞬时对象的生命周期有限，由实例化它的进程的寿命所决定。

Hibernate Session、Transaction和Query
Session: 是一个单线程、非共享的对象，表示使用数据库的一个特定单元。有持久化管理器API,调用它来加载和存储对象。

事务属性:
1.隔离级别
    并发事务带来的问题:
        多个事务并发运行，操作相同的数据完成各自的任务。可能会导致以下问题
        （1）脏读:当一个事务正在访问数据并且对数据进行修改，而这种修改没有提交到数据库中，这时另一个事务也访问了这个数据，
        然后使用这个数据。因为这个数据是没有提交的数据，另外一个事务读到这个数据是"脏数据",依据"脏数据"所做的操作可能是不正确的。
        （2）丢失修改:A = 20 事务1读取A的值为20，事务2读取A的值为20，事务1修改A = A - 1,事务2 修改A = A - 1,结果A = 19。
        事务1的修改丢失。
        （3）不可重复读:在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问了该数据。
        第一个事务的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。
        （4）幻读:欢幻读与不可重复读类似。发生在一个事务读取了及行数据，另一个事务插入了一些数据。在随后的查询中，第一个事务
        就会出现一些原本不存在的数据。
        不可重复读和幻读的区别
        不可重复读的重点是修改，幻读的重点是新增和删除。
     TransactionDefinition接口中定义了五个表示隔离级别的常量:
        TransactionDefinition.ISOLATION_DEFAULT: 使用后端数据库默认的隔离级别，MySql默认采用的REPEATABLE_READ
        Oracle默认采用READ_COMMITED
     TransactionDefinition.ISOLATION_READ_UNCOMMITTED: 最低的隔离级别，允许尚未提交的数据变更，可能会导致脏读、
     幻读、不可重复读。
     TransactionDefinition.ISOLATTON_READ_COMMITTED: 允许读取并发事务已经提交的数据，可以阻止脏读，幻读或不可重复读
     仍有可能发生。
     TransactionDefinition.ISOLATION_REPEATABLE_READ: 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，
     可以阻止脏读和不可重复读，但幻读仍有可能发生。
     TransactionDefinition.ISOLATION_SERIALIZABLE: 	最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。
     但是这将严重影响程序的性能。通常情况下也不会用到该级别。
2.传播行为
3.回滚规则
4.是否只读
5.事务超时


