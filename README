ArrayList的add方法，向指定的位置添加元素。
public void add (int index, E element) {
}

基本思路
(1)检查添加的元素下标是否越界
(2)判断数组是否需要扩容
(3)将需要插入位置之后的元素向后复制一位
(4)为数组下标为index的元素赋值
(5)将数组长度 + 1

ArrayList的get方法，获取指定下标的元素
(1)检查数组是否越界
(2)直接从底层函数中拿到想要的值
return element(index);

public E get(int index) {
    rangeCheck(index);
    return elementData(index);
}

E elementData(int index) {
    return (E) elementData[index];
}

ArrayList的set方法，改变指定下标的元素
(1)检查数组是否越界
(2)获取下标位置原来的元素
(3)为指定下标的元素赋值
(4)返回原来的元素

public E set(int index, E element) {
    rangeCheck(index);
    E oldValue = elementData(index);
    elementData[index] = element;
    return oldValue;
}

LinkedList 特性
LinkedList是基于双向列表实现的

Vector是线程安全的。底层是数组实现的,数组长度不够用时扩展一倍。


线性表
线性表中的元素是按照线性排序的，线性表中的元素是按线性排列的。线性指逻辑上的线性。
线性表分为两大类，分别为顺序表和链表。

1.顺序表
顺序表中的数据元素是连续的，内存划分的区域也是连续的。

2.链表
链表在物理存储上通常是非连续的，非顺序的方式存储的，数据元素的逻辑顺序是通过链表中的引用来实现的。
（1）单向链表
内存中的对象是随机分布的，对象不仅存储了数据而且还持有一个next的引用，指向下一个对象，确定一组对象的逻辑顺序。
（2）循环链表
和单向列表相同，最后一个对象又指向了第一的对象。
（3）双向列表
不但持有next引用指向下一个对象，还持有一个prev引用，指向上一个对象。

3.栈和队列
栈和队列是比较特殊的线性表。
（1）栈
    栈是一种操作受限制的线性表。限制是仅允许在线性表的尾部进行添加和删除操作，称作栈顶，另一端称为栈底。向
    一个栈添加元素称为压栈，删除元素称为出栈。
（2）队列
    队列也是一种操作受限制的线性表。只能从头部删除元素，从队尾添加元素，进行删除操作的一端称为队头。

